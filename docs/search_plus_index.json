{"./":{"url":"./","title":"Computer Network Lab Manual","keywords":"","body":"Computer Network Lab Manual Computer Network, Nanjing University, Spring 2020 Course Info Course Number: 22010050 Lecturer: Chen Tian & Wenzhong Li Website: https://cs.nju.edu.cn/lwz/networks-2020/ Contact Course QQ group: 940577165 You can find TAs and our 教学立方 invitation code after joining this group. Lab Assignments Lab -1: Python This is not a lab assignment, but helps you to learn Python. Start the lab here. Lab 0: Switchyard & Mininet Out: , due . Lab 1: Learning switch Out: , due . Lab 2: IPv4 Router Out: , due . Lab 2a: Respond to ARP Out: , due . Lab 2b: Forwarding packets Out: , due . Lab 2c: Respond to ICMP Out: , due . Lab 3: Reliable Communication Out: , due . Lab 3a: Sender and Router Out: , due . Lab 3b: Receiver Out: , due . Policies We encourage discussions with others to clarify questions about homework problems and programming assignment problem statements. However [!DANGER|style:flat] Programming solutions must be your own. Do not make your remote assignment repository public. "},"content/ch-1/lab--1.html":{"url":"content/ch-1/lab--1.html","title":"Lab -1: Python","keywords":"","body":"Lab -1: Python Switchyard and Mininet are developed in Python. So you need to program in Python (though there are some methods to avoid using Python). Python is an easy-learning language. If you are not familiar with it, here are some materials for you to get started. 廖雪峰的 Python 3 教程 Python 教程 Learn Python - Free Interactive Python Tutorial Our VM is Python preinstalled so you can skip installing. Topics you need to know about Python are listed here Python Interpreter Data Types (Important) Data Structures (Important) Flow Control (Important) Functions (Important) Modules Input and Output Errors and Exceptions Standard Library Virtual Environments and Packages (Important) Except those topics marked as important, it is no need to read it carefully, just program as you learn. We expect that you will cost about 3 days on this if you haven't worked with Python. [!NOTE] Python 3 is the main language you will use in Switchyard programming. But you need to know some difference between Python 3 and Python 2 though they are mostly the same. Because you may write some Mininet topology scripts using Python 2. "},"content/ch00/lab-0.html":{"url":"content/ch00/lab-0.html","title":"Lab 0: Switchyard & Mininet","keywords":"","body":"Lab 0: Switchyard & Mininet Overview In this chapter we will introduce all preparations for our network experiments. Details Our lab assignments are based on CS640 in Wisconsin University. Most materials are the same. In the future, we will improve the experimantal content based on feedback. For this lab assignment, you will gradually master our experimental environment. But we need you to know some basic skills, such as how to develope on linux or how to program. If you are not familiar with these, please tell TAs. We will list some helpful materials for you to get started quickly. First, you need to complete setting up your enviroment. Read section Prerequisites. Then here are some tutorials help you get started with our experimental environment. How to use Mininet How to use Wireshark How to program in Switchyard "},"content/ch00/prerequisites.html":{"url":"content/ch00/prerequisites.html","title":"Prerequisites","keywords":"","body":"Prerequisites Virtual Machine We are providing you with a Ubuntu 18.04 (64-bit) VM image for this assignment. This image has Switchyard, Mininet and Wireshark installed so you do not need to worry about setting up the enviroment. You can find the VM image here. (user name: njucs - password: 123) You can learn more about importing a VM image in VirtualBox here. You are also free to use your favorite vitualization software for importing the image but you will most probably have to deal with the possible issues on yourself. If you are a free soul and want to setup Switchyard in a different environment you are welcome to do that as well. You can find some useful information here. This might or might not be useful for you depending on your environment. Mininet Mininet enables you to quickly create, interact with, customize and share a software defined network prototype, and provides a smooth path to running on hardware. The most useful material is their website. Here is the Mininet Walkthrough. It is better to go through this manual. Because we have not given you the whole network image to you right now, there must be something you do not understand yet. But don not worry, we will have a small practice of Mininet in our manual. We expect that you will cost 2 days on this. Wireshark Wireshark is the world’s foremost and widely-used network protocol analyzer. It lets you see what’s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. You will use it to inspect your network setting up by Mininet, and test the function of your device written in Switchyard. We also have a small practice of Wireshark in our manual. Wireshark User’s Guide is a verbose document about Wireshark but We do not recommend it. So sometimes the offical document is hard for user to get started. You can find many blogs writing about how to use Wireshark. Read them instead. We expect that you will cost an afternoon on this. Switchyard Switchyard is a framework for creating, testing, and experimenting with software implementations of networked systems such as Ethernet switches, IP routers, firewalls and middleboxes, and end-host protocol stacks. It is the framework targeting on teaching and used in University of Wisconsin. So we have this framework to do some network testing without multiple devices and a bunch of wires. Switchyard documentation is available here. And this is the document you read most often. In this lab we will combine Mininet, Wireshark and Swithyard together, as we said before. We expect that you will cost 4 days on this. It is long but important. Git (Optional) You can use Git to manage your projects with a clear editing history and we recommend using it. It is better to have your local repository synchronized with a remote backup on GitHub or some one else. The tutorial of Git is listed below. 廖雪峰的 Git 教程 We expect that you will cost 2 days on this. "},"content/ch00/mininet.html":{"url":"content/ch00/mininet.html","title":"How to use Mininet","keywords":"","body":"How to use Mininet "},"content/ch00/wireshark.html":{"url":"content/ch00/wireshark.html","title":"How to use Wireshark","keywords":"","body":"How to use Wireshark "},"content/ch00/switchyard.html":{"url":"content/ch00/switchyard.html","title":"How to program in Switchyard","keywords":"","body":"How to program in Switchyard "},"appendix/appendix.html":{"url":"appendix/appendix.html","title":"Appendix","keywords":"","body":"Appendix Some notes and additional materials are in this chapter. "},"appendix/environment-setup.html":{"url":"appendix/environment-setup.html","title":"Environment Setup","keywords":"","body":"Environment Setup If you see here then you must be a high-end player, the instructions here will be very simple. Install Switchyard You can find instructions here, the repository of switchyard on GitHub. A quick note here for Ubuntu. git clone https://github.com/jsommers/switchyard.git sudo apt-get install libffi-dev libpcap-dev python3-dev python3-pip You can install Switchyard and the necessary related packages in an isolated Python virtual environment (\"venv\"), which is the recommended path, or in the system directories, which is often less desirable. The venv route is highly suggested, since it makes all installation \"local\" and can easily destroyed, cleaned up, and recreated. To create a new virtual environment, you could do something like the following under your workspace folder python3 -m venv syenv You can change the name syenv to whatever you'd like to name your virtual environment. Next, you need to activate the environment. The instructions vary depending on the shell you're using. On bash, the command is source ./syenv/bin/activate You'll need to replace syenv with whatever you named the virtual environment. If you're using a different shell than bash, refer to Python documentation on the venv module. Finally, install Switchyard. All the required additional libraries should be automatically installed, too. python3 -m pip install switchyard Then I suggest to exclude your virtual environment out of git tracking. Add this line in .gitignore syenv/ Install Mininet sudo apt-get install mininet Or you want to build mininet yourself. The installation guide is here. Install Wireshark sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark You need to configure wireshark during installation. For non-superusers capturing packets, chose Yes here. Then add your user to wireshark user group to allow you capturing packets. sudo usermod -a -G wireshark $USER Other Softwares You also want to install some editors like Vim, Emacs, Visual Studio Code, Sublime and so on. But we do not install any one of them to avoiding a quarrel about the best editor. Chose your favorite one and install it yourself. Another helpful module VBoxGusetAdditions is not installed because various virtual machine hypervisors you will use. "},"appendix/about-this-repository.html":{"url":"appendix/about-this-repository.html","title":"About This Repository","keywords":"","body":"About This Repository This repository is the sorce code of our manual. Building You need to install gitbook-cli first. Then run gitbook build . docs When you build this for the first time, you need to install plugins. gitbook install License The manual is distributed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. Repository Sturcture The body is placed under the content folder, and the chapters are placed in the corresponding chapter folder, starting with ch and followed by two-digit numbers. Each section and subsection is placed in the chapter folder. The pictures and other content used in the text are placed in the assets folder in the corresponding chapter folder. "}}